var AceAccordion =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/ace-accordion.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@alexspirgel/extend/extend.js":
/*!****************************************************!*\
  !*** ./node_modules/@alexspirgel/extend/extend.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * extend v2.0.3\r\n * https://github.com/alexspirgel/extend\r\n */\r\n\r\n/**\r\n * Extends an object with another object(s).\r\n *\r\n * @param {array} objects - Array of objects containing the resulting object and the objects to merge into it.\r\n * @param {boolean} [deep] - Optional flag to enable or disable recursive merge.\r\n *\r\n * @returns {object} The object that has been extended.\r\n */\r\n\r\nconst extend = (objects, deep) => {\r\n\r\n\t/**\r\n\t * Extends an object with another object.\r\n\t *\r\n\t * @param {object} target_object - The target object to be merged into.\r\n\t * @param {object} merge_object - The object to merge into the target object.\r\n\t * @param {boolean} [deep] - Optional flag to enable or disable recursive merge.\r\n\t *\r\n\t * @returns {object} The object that has been extended.\r\n\t */\r\n\r\n\tconst extendObject = (target_object, merge_object, deep) => {\r\n\t\t// For each property in the merge_object.\r\n\t\tfor (let property in merge_object) {\r\n\t\t\t// If the merge_object value is an object, is not null, and the deep flag is true.\r\n\t\t\tif (typeof merge_object[property] === 'object' && merge_object[property] !== null && deep) {\r\n\t\t\t\t// If the merge_object value is a special case.\r\n\t\t\t\tif (merge_object[property] instanceof Window || merge_object[property] instanceof HTMLDocument || merge_object[property] instanceof Element) {\r\n\t\t\t\t\t// Set the target_object property value equal to the merge_object property value.\r\n\t\t\t\t\ttarget_object[property] = merge_object[property];\r\n\t\t\t\t\t// Continue past the normal deep object handling.\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// If the merge_object value is an array.\r\n\t\t\t\tif (Array.isArray(merge_object[property]) || merge_object[property] instanceof NodeList) {\r\n\t\t\t\t\tif (merge_object[property] instanceof NodeList) {\r\n\t\t\t\t\t\tmerge_object[property] = Array.from(merge_object[property]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set the target_object value equal to an empty array (arrays are replaced, not merged).\r\n\t\t\t\t\ttarget_object[property] = [];\r\n\t\t\t\t}\r\n\t\t\t\t// If the target_object value is not an object or if it is null.\r\n\t\t\t\telse if (typeof target_object[property] !== 'object' || target_object[property] === null) {\r\n\t\t\t\t\t// Set the target_object value equal to an empty object.\r\n\t\t\t\t\ttarget_object[property] = {};\r\n\t\t\t\t}\r\n\t\t\t\t// Call the extendObject function recursively.\r\n\t\t\t\textendObject(target_object[property], merge_object[property], deep);\r\n\t\t\t\t// Continue to the next property, skipping the normal value assignment.\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Set the target_object property value equal to the merge_object property value (primitive values or shallow calls).\r\n\t\t\ttarget_object[property] = merge_object[property];\r\n\t\t}\r\n\t\t// Return the target_object.\r\n\t\treturn target_object;\r\n\t}; // End function extendObject.\r\n\r\n\t// If objects length is greater than 1.\r\n\tif (objects.length > 1) {\r\n\t\t// For each object in objects (skipping the first object).\r\n\t\tfor (let object = 1; object < objects.length; object++) {\r\n\t\t\t// If the current loop item is an object and not null.\r\n\t\t\tif (typeof objects[object] === 'object' && objects[object] !== null) {\r\n\t\t\t\t// Extend the first object with the current loop object.\r\n\t\t\t\textendObject(objects[0], objects[object], deep);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// Return the first object in the array.\r\n\treturn objects[0];\r\n\r\n}; // End function extend.\r\n\r\n// If script is being required as a node module.\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\t// Export the extend function.\r\n\tmodule.exports = extend;\r\n}\n\n//# sourceURL=webpack://AceAccordion/./node_modules/@alexspirgel/extend/extend.js?");

/***/ }),

/***/ "./src/js/accordion.js":
/*!*****************************!*\
  !*** ./src/js/accordion.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Require accordion class.\r\nconst Item = __webpack_require__(/*! ./item.js */ \"./src/js/item.js\");\r\n\r\n/**\r\n * Defines an Accordion.\r\n */\r\n\r\nconst Accordion = class {\r\n\r\n\t/**\r\n\t * Defines a set of constant class variables.\r\n\t */\r\n\r\n\tstatic get constants() {\r\n\t\treturn {\r\n\t\t\tid_attribute: 'data-accordion-id'\r\n\t\t};\r\n\t} // End: constants\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tget options() {\r\n\t\t// Return options from the parent AceAccordion.\r\n\t\treturn this.ace_accordion.options;\r\n\t} // End: get options\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tconstructor(ace_accordion, accordion_element) {\r\n\r\n\t\t// Set a reference to the AceAccordion.\r\n\t\tthis.ace_accordion = ace_accordion;\r\n\r\n\t\t// Add this Accordion class instance to the AceAccordion.\r\n\t\tthis.id = this.ace_accordion.constructor._setClassInstance(this, this.ace_accordion, 'accordions', 'accordion_count');\r\n\t\t// Add the accordion element reference.\r\n\t\tthis.element = accordion_element;\r\n\r\n\t\t// Set the AceAccordion class instance id data attribute.\r\n\t\tthis.element.setAttribute(this.ace_accordion.constructor.constants.id_attribute, this.ace_accordion.id);\r\n\t\t// Set the Accordion class instance id data attribute.\r\n\t\tthis.element.setAttribute(this.constructor.constants.id_attribute, this.id);\r\n\r\n\t\t// Create a unique selector for this Accordion class instance.\r\n\t\t// Unique selector is a combination of AceAccordion and Accordion class instance ids.\r\n\t\tthis.selector = this.ace_accordion.selector + '[' + this.constructor.constants.id_attribute + '=\"' + this.id + '\"]';\r\n\r\n\t\t// Get the items in this accordion.\r\n\t\tconst item_elements = this.element.querySelectorAll(this.selector + ' > ' + this.options.selectors.item);\r\n\t\t// If there is at least one item.\r\n\t\tif (item_elements.length > 0) {\r\n\t\t\t// For each item.\r\n\t\t\tfor(let item_element = 0; item_element < item_elements.length; item_element++) {\r\n\t\t\t\t// Initialize an item.\r\n\t\t\t\tconst item = new Item(this, item_elements[item_element]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If there are no items in this accordion.\r\n\t\telse {\r\n\t\t\t// If debug is true.\r\n\t\t\tif (this.options.debug) {\r\n\t\t\t\t// Send a warning to the console.\r\n\t\t\t\tconsole.warn(this.constructor.name + \": No items found using selector: '\" + this.options.selectors.item + \"'\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If debug is true.\r\n\t\tif (this.options.debug) {\r\n\t\t\t// Log the classes.\r\n\t\t\tconsole.log('Debug: Accordion Class:');\r\n\t\t\tconsole.dir(this.constructor);\r\n\t\t\t// Log the instance.\r\n\t\t\tconsole.log('Debug: AceAccordion - ' + this.ace_accordion.id + ':');\r\n\t\t\tconsole.log('Debug: Accordion - ' + this.id + ':');\r\n\t\t\tconsole.dir(this);\r\n\t\t}\r\n\r\n\t\t// Return this instance.\r\n\t\treturn this;\r\n\r\n\t} // End: constructor\r\n\r\n};\r\n\r\n// Export the Accordion class.\r\nmodule.exports = Accordion;\n\n//# sourceURL=webpack://AceAccordion/./src/js/accordion.js?");

/***/ }),

/***/ "./src/js/ace-accordion.js":
/*!*********************************!*\
  !*** ./src/js/ace-accordion.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Notes:\r\n// - Class > instance > accordion > item > heading/content\r\n// - only re-index items when we need to check them, do not use attribute, track only internally\r\n// - separate out classes in different files\r\n\r\n\r\n\r\n/**\r\n * AceAccordion v1.0.0\r\n * https://github.com/alexspirgel/accordion\r\n */\r\n\r\n// Require extend function.\r\nconst extend = __webpack_require__(/*! @alexspirgel/extend */ \"./node_modules/@alexspirgel/extend/extend.js\");\r\n// Require Accordion class.\r\nconst Accordion = __webpack_require__(/*! ./accordion.js */ \"./src/js/accordion.js\");\r\n\r\n/**\r\n * Defines an Ace Accordion.\r\n */\r\n\r\nconst AceAccordion = class {\r\n\r\n\t/**\r\n\t * Defines the default set of options.\r\n\t */\r\n\r\n\tstatic get options_default() {\r\n\t\treturn {\r\n\t\t\tselectors: {\r\n\t\t\t\taccordion: '.accordion', // {string} Custom accordion element selector.\r\n\t\t\t\titem: '.accordion__item', // {string} Custom item element selector.\r\n\t\t\t\theading: '.accordion__item__heading', // {string} Custom heading element selector.\r\n\t\t\t\tcontent: '.accordion__item__content' // {string} Custom content element selector.\r\n\t\t\t}, // End: selectors\r\n\t\t\taccessibility_warnings: true, // {boolean} Log detected accessibility issues as warnings.\r\n\t\t\tclose_nested_items: false, // {boolean} Close immediate nested items. Can chain reaction to close further nested levels depending on nested options.\r\n\t\t\tcustom_trigger_selector: '', // {string} Alternate selector to trigger open and close instead of the heading selector.\r\n\t\t\tdefault_open_items: [], // {number|string|object|array} Initializes item(s) already open.\r\n\t\t\tmultiple_open_items: true, // {boolean} Allow multiple items to be open at the same time.\r\n\t\t\topen_anchored_items: false, // {boolean} When anchored to an accordion item, open it.\r\n\t\t\tcallbacks: {\r\n\t\t\t\taccordion: {\r\n\t\t\t\t\tinitialize: {\r\n\t\t\t\t\t\tbefore: () => {},\r\n\t\t\t\t\t\tafter: () => {}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\titem: {\r\n\t\t\t\t\tinitialize: {\r\n\t\t\t\t\t\tbefore: () => {},\r\n\t\t\t\t\t\tafter: () => {}\r\n\t\t\t\t\t},\r\n\t\t\t\t\topen: {\r\n\t\t\t\t\t\tbefore: () => {},\r\n\t\t\t\t\t\tafter: () => {}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tclose: {\r\n\t\t\t\t\t\tbefore: () => {},\r\n\t\t\t\t\t\tafter: () => {}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, // End: callbacks\r\n\t\t\tdebug: false // Log helpful messages to the console for development.\r\n\t\t}; // End: return\r\n\t} // End: options_default\r\n\r\n\t/**\r\n\t * Defines a set of constant class variables.\r\n\t */\r\n\r\n\tstatic get constants() {\r\n\t\treturn {\r\n\t\t\tid_attribute: 'data-ace-accordion-id'\r\n\t\t};\r\n\t} // End: constants\r\n\r\n\t/**\r\n\t * Sets an instance to a class.\r\n\t * @returns {number} instance_id - The id of the instance (zero indexed).\r\n\t */\r\n\r\n\tstatic _setClassInstance(instance, Class, list_property, count_property) {\r\n\r\n\t\t// Initialize the instance id variable.\r\n\t\tlet instance_id;\r\n\r\n\t\t// If the class instance list has not been initialized.\r\n\t\tif (!Class[list_property]) {\r\n\t\t\t// Initialize the class instances list.\r\n\t\t\tClass[list_property] = {};\r\n\t\t}\r\n\r\n\t\t// If the class instance list is not an array.\r\n\t\tif (!Array.isArray(Class[list_property])) {\r\n\t\t\t// If the class instance count has not been initialized.\r\n\t\t\tif (typeof Class[count_property] !== 'number') {\r\n\t\t\t\t// Set the class instance count to 0.\r\n\t\t\t\tClass[count_property] = 0;\r\n\t\t\t}\r\n\t\t\t// Increment the class instance count.\r\n\t\t\tClass[count_property]++;\r\n\t\t\t// Generate the instance id from the instance count.\r\n\t\t\t// Subtract one to have the id be zero indexed.\r\n\t\t\tinstance_id = Class[count_property] - 1;\r\n\t\t\t// Add the instance to the class instances object.\r\n\t\t\tClass[list_property][instance_id] = instance;\r\n\t\t}\r\n\t\t// If the class instance list is an array.\r\n\t\telse {\r\n\t\t\t// Set the instance id equal to the array length (also the next available index).\r\n\t\t\tinstance_id = Class[list_property].length;\r\n\t\t\t// Add the instance to the instance list.\r\n\t\t\tClass[list_property].push(instance);\r\n\t\t}\r\n\r\n\t\t// Return this instance's unique id.\r\n\t\treturn instance_id;\r\n\r\n\t} // End: _setClassInstance\r\n\r\n\r\n\t/**\r\n\t * Initialize item.\r\n\t */\r\n\r\n\t_initializeItem(item_element, accordion_id) {\r\n\r\n\t\t/**\r\n\t\t * Initialize heading.\r\n\t\t */\r\n\r\n\t\tconst initializeHeading = (heading_element, item) => {\r\n\t\t\tconsole.log(heading_element);\r\n\t\t\t// Set the heading role attribute to heading.\r\n\t\t\theading_element.setAttribute('role', 'heading');\r\n\t\t\t// Set the heading aria-controls attribute to the item content id.\r\n\t\t\theading_element.setAttribute('aria-controls', item.content.id);\r\n\t\t\t// Set the accordion item heading aria-level attribute.\r\n\t\t\taccordion_item_heading.setAttribute('aria-level', accordion_level);\r\n\t\t\t// Set the accordion item heading aria-expanded attribute.\r\n\t\t\taccordion_item_heading.setAttribute('aria-expanded', aria_expanded_value);\r\n\t\t\t// Add click event listener to toggle the accordion item opened/closed state.\r\n\t\t\taccordion_item_heading.addEventListener('click', Accordion.headingClickEventHandler);\r\n\t\t\t// Add key down event listener for switching between accordion items and accessibility.\r\n\t\t\taccordion_item_heading.addEventListener('keydown', Accordion.headingKeyDownEventHandler);\r\n\t\t}; // End: initializeHeading\r\n\r\n\t\t/**\r\n\t\t * Initialize content.\r\n\t\t */\r\n\r\n\t\tconst initializeContent = (content_element) => {}; // End: initializeContent\r\n\r\n\t\t// Get the accordion object. Assign it to a variable for easier access.\r\n\t\tconst this_accordion = this.accordions[accordion_id];\r\n\t\t// Initialize this accordion to the instance object.\r\n\t\tconst item_index = this._setClassInstance({}, this_accordion, 'items');\r\n\r\n\t\t// Initialize object to hold item data.\r\n\t\tconst this_item = this_accordion.items[item_index];\r\n\t\t// Add the item index to the item object.\r\n\t\tthis_item.index = item_index;\r\n\t\t// Add the item element reference to the item object.\r\n\t\tthis_item.element = item_element;\r\n\r\n\t\t// Initialize the item state value.\r\n\t\tlet item_state = 'closed';\r\n\r\n\t\t// Get the default_open_items options value.\r\n\t\tconst default_open_items = this.options.default_open_items;\r\n\t\t// If the option value is not false, null, or undefined.\r\n\t\tif (default_open_items !== false || default_open_items !== null || typeof default_open_items !== 'undefined') {\r\n\t\t\t// If the element matches the default_open_items value.\r\n\t\t\tif (this._itemMatchesValue(this_item, default_open_items)) {\r\n\t\t\t\t// Set the item state value to opened.\r\n\t\t\t\titem_state = 'opened';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add the item state to the item object.\r\n\t\tthis_item.state = item_state;\r\n\t\t// Set the item state attribute.\r\n\t\tthis_item.element.setAttribute(this.constructor.constants.item_state_attrubute, item_state);\r\n\r\n\t\t// Get this item's content element.\r\n\t\t// const content_element = this_item.element.querySelector(this_accordion.selector + ' > ' + this.options.selectors.item + ' > ' + this.options.selectors.content);\r\n\t\t//\r\n\t\t// this_item.content = initializeContent(content_element, this_item);\r\n\r\n\t\t// Get this item's heading element.\r\n\t\t// const heading_element = this_item.element.querySelector(this_accordion.selector + ' > ' + this.options.selectors.item + ' > ' + this.options.selectors.heading);\r\n\t\t//\r\n\t\t// this_item.heading = initializeHeading(heading_element, this_item);\r\n\r\n\r\n\t} // End: _initializeItem\r\n\r\n\r\n\t/**\r\n\t * AceAccordion class constructor.\r\n\t * @param {object} options_user - A set of override options supplied by the user.\r\n\t * @returns {object} this - The reference to this instance.\r\n\t */\r\n\r\n\tconstructor(options_user) {\r\n\r\n\t\t// For now, assume passed parameter is a correctly formed options object.\r\n\t\t// TO-DO: implement schema checking script.\r\n\r\n\t\t// Merge default options and user options into new object using the imported extend function.\r\n\t\tthis.options = extend([{}, this.constructor.options_default, options_user], true);\r\n\r\n\t\t// Add this instance to the static class object and set the instance id on this instance.\r\n\t\tthis.id = this.constructor._setClassInstance(this, this.constructor, 'instances', 'instance_count');\r\n\t\t// Create a selector for the unique local instance id.\r\n\t\tthis.selector = '[' + this.constructor.constants.id_attribute + '=\"' + this.id + '\"]';\r\n\r\n\t\t// Get the accordion element(s).\r\n\t\tconst accordion_elements = document.querySelectorAll(this.options.selectors.accordion);\r\n\t\t// If there at least one element matching the accordion selector.\r\n\t\tif (accordion_elements.length > 0) {\r\n\t\t\t// For each matching accordion element.\r\n\t\t\tfor (let accordion_element = 0; accordion_element < accordion_elements.length; accordion_element++) {\r\n\t\t\t\t// Initialize an accordion.\r\n\t\t\t\tconst accordion = new Accordion(this, accordion_elements[accordion_element]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If there are no elements matching the accordion selector.\r\n\t\telse {\r\n\t\t\t// Send a warning to the console.\r\n\t\t\tconsole.warn(this.constructor.name + \": No accordions found using selector: '\" + this.options.selectors.accordion + \"'\");\r\n\t\t}\r\n\r\n\t\t// If debug is true.\r\n\t\tif (this.options.debug) {\r\n\t\t\t// Log the classes.\r\n\t\t\tconsole.log('Debug: AceAccordion Class:');\r\n\t\t\tconsole.dir(this.constructor);\r\n\t\t\t// Log the instance.\r\n\t\t\tconsole.log('Debug: AceAccordion - ' + this.id + ':');\r\n\t\t\tconsole.dir(this);\r\n\t\t}\r\n\r\n\t\t// Return this instance.\r\n\t\treturn this;\r\n\r\n\t} // End: constructor\r\n\r\n\t\r\n\t/******************************************************\r\n\t* OLD CODE WAITING TO BE REFACTORED BEYOND THIS POINT *\r\n\t*******************************************************/\r\n\t\r\n\r\n\t/**\r\n\t * Handles a click event on an accordion item heading.\r\n\t */\r\n\r\n\tstatic headingClickEventHandler(event) {\r\n\t\t// Get the accordion parent item.\r\n\t\tconst accordion_item = event.target.accordion_item_parent;\r\n\t\t// Toggle the accordion item.\r\n\t\tAccordion.toggleItem(accordion_item);\r\n\t} // End function: headingClickEventHandler.\r\n\r\n\t/**\r\n\t * Handles a key down event on an accordion item heading.\r\n\t */\r\n\r\n\tstatic headingKeyDownEventHandler(event) {\r\n\t\t// Get the accordion parent item.\r\n\t\tconst accordion_item = event.target.accordion_item_parent;\r\n\t\tswitch(event.keyCode) {\r\n\t\t\t// If key code is up arrow.\r\n\t\t\tcase 38:\r\n\t\t\t\tAccordion.focusItem(accordion_item, 'previous');\r\n\t\t\t\tbreak;\r\n\t\t\t// If key code is down arrow.\r\n\t\t\tcase 40:\r\n\t\t\t\tAccordion.focusItem(accordion_item, 'next');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} // End function: headingKeyDownEventHandler.\r\n\r\n\t/**\r\n\t * Handles an open transition end event.\r\n\t */\r\n\r\n\tstatic headingOpenTransitionEndEventHandler(event) {\r\n\t\tconst accordion_parent = event.target.accordion_parent;\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\tif(event.target.matches(accordion_options.selectors.item)){\r\n\t\t\t\tAccordion.finishOpeningItem(event.target);\r\n\t\t}\r\n\t} // End function: headingOpenTransitionEndEventHandler.\r\n\r\n\t/**\r\n\t * Handles a close transition end event.\r\n\t */\r\n\r\n\tstatic headingCloseTransitionEndEventHandler(event) {\r\n\t\tconst accordion_parent = event.target.accordion_parent;\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\tif(event.target.matches(accordion_options.selectors.item)){\r\n\t\t\t\tAccordion.finishClosingItem(event.target);\r\n\t\t}\r\n\t} // End function: headingCloseTransitionEndEventHandler.\r\n\r\n\tstatic openItem(accordion_item, skip_transition) {\r\n\r\n\t\t// Remove the close transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingCloseTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Get the accordion options.\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\r\n\t\t// If multiple open items are not allowed.\r\n\t\tif(accordion_options.multiple_open_items === false) {\r\n\t\t\t// Get all the accordion items within this accordion.\r\n\t\t\tconst accordion_items = accordion_parent.children;\r\n\t\t\t// For each accordion item.\r\n\t\t\tfor(let accordion_item = 0; accordion_item < accordion_items.length; accordion_item++) {\r\n\t\t\t\t// If the accordion item is open or opening.\r\n\t\t\t\tif(accordion_items[accordion_item].matches('[' + Accordion.item_state_attrubute + '=\"opening\"], [' + Accordion.item_state_attrubute + '=\"opened\"]')) {\r\n\t\t\t\t\t// Close the accordion item.\r\n\t\t\t\t\tAccordion.closeItem(accordion_items[accordion_item]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} // End option: multiple_open_items.\r\n\r\n\t\t// Get the current item height.\r\n\t\tconst item_height_start = accordion_item.offsetHeight;\r\n\t\t// Set the item to its current height, keeping it at that height.\r\n\t\taccordion_item.style.height = item_height_start + 'px';\r\n\t\t// Set the accordion item state attribute to show the beginning of the opening process.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'opening');\r\n\t\t// Set the related aria attributes to show the accordion is open.\r\n\t\taccordion_item.accordion_item_heading.setAttribute('aria-expanded', 'true');\r\n\t\taccordion_item.accordion_item_content.setAttribute('aria-hidden', 'false');\r\n\r\n\t\t// Skip transition is true.\r\n\t\tif(skip_transition) {\r\n\t\t\t// Finish opening the item immediately, disregarding transitions.\r\n\t\t\tAccordion.finishOpeningItem(accordion_item);\r\n\t\t}\r\n\t\t// If skip transition is false or not passed, continue with the transition as normal.\r\n\t\telse {\r\n\t\t\t// Get the height of the accordion heading.\r\n\t\t\tconst item_heading_height = accordion_item.accordion_item_heading.offsetHeight;\r\n\t\t\t// Get the height of the accordion content.\r\n\t\t\tconst item_content_height = accordion_item.accordion_item_content.offsetHeight;\r\n\t\t\t// Calculate the end height for the accordion item.\r\n\t\t\tconst item_height_end = item_heading_height + item_content_height;\r\n\t\t\t// Add an open transitionend event listener to the accordion item.\r\n\t\t\taccordion_item.addEventListener('transitionend', Accordion.headingOpenTransitionEndEventHandler);\r\n\t\t\t// Set the accordion item to it's end height.\r\n\t\t\taccordion_item.style.height = item_height_end + 'px';\r\n\t\t}\r\n\r\n\t} // End function: openItem.\r\n\r\n\t/**\r\n\t * Finish opening the accordion item.\r\n\t */\r\n\r\n\tstatic finishOpeningItem(accordion_item) {\r\n\t\t// Remove the open transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingOpenTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Remove the explicit height (should default back to auto).\r\n\t\taccordion_item.style.removeProperty('height');\r\n\t\t// Set the accordion item state attribute to show the item has finished opening.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'opened');\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tstatic closeItem(accordion_item, skip_transition) {\r\n\r\n\t\t// Remove the open transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingOpenTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Get the accordion options.\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\t// Get the current item height.\r\n\t\tconst item_height_start = accordion_item.offsetHeight;\r\n\t\t// Set the item to its current height.\r\n\t\taccordion_item.style.height = item_height_start + 'px';\r\n\t\t// Set the accordion item state attribute to show the beginning of the closing process.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'closing');\r\n\t\t// Set the related aria attributes to show the accordion is closed.\r\n\t\taccordion_item.accordion_item_heading.setAttribute('aria-expanded', 'false');\r\n\t\taccordion_item.accordion_item_content.setAttribute('aria-hidden', 'true');\r\n\r\n\t\t// Skip transition is true.\r\n\t\tif(skip_transition) {\r\n\t\t\t// Finish closing the item immediately, disregarding transitions.\r\n\t\t\t// The passed argument must mimic the event listener event.\r\n\t\t\tAccordion.finishClosingItem(accordion_item);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Get the height of the accordion heading.\r\n\t\t\tconst item_heading_height = accordion_item.accordion_item_heading.offsetHeight;\r\n\t\t\t// Add a close transitionend event listener to the accordion item.\r\n\t\t\taccordion_item.addEventListener('transitionend', Accordion.headingCloseTransitionEndEventHandler);\r\n\t\t\t// Set the accordion item to it's heading height.\r\n\t\t\taccordion_item.style.height = item_heading_height + 'px';\r\n\t\t}\r\n\r\n\t} // End function: closeItem.\r\n\r\n\t/**\r\n\t * Finish closing the accordion item.\r\n\t */\r\n\r\n\tstatic finishClosingItem(accordion_item) {\r\n\t\t// Remove the close transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingCloseTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Get the accordion options.\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\t// Remove the explicit height (should default back to auto).\r\n\t\taccordion_item.style.removeProperty('height');\r\n\t\t// Set the accordion item state attribute to show the item has finished closing.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'closed');\r\n\r\n\t\t// If the close item children is true.\r\n\t\tif(accordion_options.close_nested_items === true) {\r\n\t\t\t// Get nested accordions.\r\n\t\t\tconst nested_accordions = accordion_item.querySelectorAll('[' + Accordion.id_attribute + ']');\r\n\t\t\t// For each nested accordion.\r\n\t\t\tfor(let nested_accordion = 0; nested_accordion < nested_accordions.length; nested_accordion++) {\r\n\t\t\t\t// Get this current nested accordion.\r\n\t\t\t\tconst this_nested_accordion = nested_accordions[nested_accordion];\r\n\t\t\t\t// Get this nested accordion parent accordion.\r\n\t\t\t\tconst this_nested_accordion_parent_accordion = this_nested_accordion.parentNode.closest('[' + Accordion.id_attribute + ']');\r\n\t\t\t\t// If the parent accordion matches the original item parent accordion. This ensures we only select accordions one level away.\r\n\t\t\t\tif(this_nested_accordion_parent_accordion === accordion_parent) {\r\n\t\t\t\t\t// For each item in the nested accordion.\r\n\t\t\t\t\tfor(let nested_item = 0; nested_item < this_nested_accordion.accordion_items.length; nested_item++) {\r\n\t\t\t\t\t\t// Get the current nested item.\r\n\t\t\t\t\t\tconst this_nested_item = this_nested_accordion.accordion_items[nested_item];\r\n\t\t\t\t\t\t// Close the nested item.\r\n\t\t\t\t\t\tAccordion.closeItem(this_nested_item, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} // End option: close_nested_items.\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Opens or closes an accordion item based on it's current state.\r\n\t */\r\n\r\n\tstatic toggleItem(accordion_item) {\r\n\t\t// Get the current accordion item state.\r\n\t\tconst accordion_item_state = accordion_item.getAttribute(Accordion.item_state_attrubute);\r\n\t\t// If the accordion item is currently closed.\r\n\t\tif(accordion_item_state === 'closed' || accordion_item_state === 'closing') {\r\n\t\t\t// Open the accordion item.\r\n\t\t\tAccordion.openItem(accordion_item);\r\n\t\t}\r\n\t\t// If the accordion is currently opening.\r\n\t\telse if(accordion_item_state === 'opening' || accordion_item_state === 'opened') {\r\n\t\t\t// Close the accordion item.\r\n\t\t\tAccordion.closeItem(accordion_item);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user focus on a specific accordion item or the previous or next item within the accordion.\r\n\t */\r\n\r\n\tstatic focusItem(accordion_item, option) {\r\n\t\tlet item_to_focus = accordion_item;\r\n\t\tif(option) {\r\n\t\t\tconst accordion_items_list = accordion_item.accordion_parent.accordion_items;\r\n\t\t\tfor(let i = 0; i < accordion_items_list.length; i++) {\r\n\t\t\t\tif(accordion_items_list[i] === accordion_item) {\r\n\t\t\t\t\tif(option === 'previous' && i > 0) {\r\n\t\t\t\t\t\titem_to_focus = accordion_items_list[i - 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(option === 'next' && i < (accordion_items_list.length - 1)) {\r\n\t\t\t\t\t\titem_to_focus = accordion_items_list[i + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// console.log('There is no ' + option + ' item in this accordion.');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\titem_to_focus.accordion_item_heading.focus();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets or sets the passed accordion and child accordion's aria level value.\r\n\t */\r\n\r\n\tstatic nestedLevel(accordion_element, nested_level) {\r\n\t\tconst accordion_data = accordion_element[Accordion.constants.data_property];\r\n\t\tif (nested_level) {\r\n\t\t\taccordion_data.nested_level = nested_level;\r\n\t\t\t// Get all accordion children elements.\r\n\t\t\tconst immediate_child_accordions = accordion_element.querySelectorAll('[' + Accordion.constants.id_attribute + ']');\r\n\t\t\t// For each child accordion.\r\n\t\t\tfor(let accordion_child = 0; accordion_child < accordion_children.length; accordion_child++) {\r\n\t\t\t\t// Get this current child accordion element.\r\n\t\t\t\tthis_accordion_child_element = accordion_children[accordion_child];\r\n\t\t\t\t// Get the current aria-level.\r\n\t\t\t\tconst current_aria_level = parseInt(this_aria_level_element.getAttribute('aria-level'));\r\n\t\t\t\t// Set a new aria-level one greater than before.\r\n\t\t\t\tthis_aria_level_element.setAttribute('aria-level', (current_aria_level + 1));\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn accordion_element[Accordion.constants.data_property].nested_level;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an accordion.\r\n\t *\r\n\t * @param {object} options - The merged options used to configure the accordion.\r\n\t */\r\n\r\n\tinitialize_old(options) {\r\n\r\n\t\tlet this_accordion_element,\r\n\t\tthis_accordion_data,\r\n\t\taccordions_existing,\r\n\t\taccordion_next_id,\r\n\t\taccordion_nested_level,\r\n\t\taccordion_parent,\r\n\t\taccordion_children,\r\n\t\tthis_accordion_child_element;\r\n\r\n\t\t// Get the accordion element(s).\r\n\t\tconst accordion_elements = document.querySelectorAll(options.selectors.accordion);\r\n\r\n\t\t// For each accordion.\r\n\t\tfor(let accordion_element = 0; accordion_element < accordion_elements.length; accordion_element++) {\r\n\r\n\t\t\t// Get this current accordion element for the loop.\r\n\t\t\tthis_accordion_element = accordion_elements[accordion_element];\r\n\t\t\t// Initialize the accordion data object on the element.\r\n\t\t\tthis_accordion_element[Accordion.constants.data_property] = {};\r\n\t\t\t// Define a shortcut to this accordion's data, for code clarity.\r\n\t\t\tthis_accordion_data = this_accordion_element[Accordion.constants.data_property];\r\n\t\t\t\r\n\t\t\t// Attach the accordion element to the accordion data.\r\n\t\t\tthis_accordion_data.element = this_accordion_element;\r\n\r\n\t\t\t// Attach the accordion options to the accordion data.\r\n\t\t\tthis_accordion_data.options = options;\r\n\r\n\t\t\t// Get the existing accordions.\r\n\t\t\taccordions_existing = document.querySelectorAll('[' + Accordion.constants.id_attribute + ']');\r\n\t\t\t// Generate the next accordion id.\r\n\t\t\taccordion_next_id = accordions_existing.length + 1;\r\n\t\t\twhile (document.querySelector('[' + Accordion.constants.id_attribute + ']=\"' + thing + '\"')) {\r\n\t\t\t\tthing++;\r\n\t\t\t}\r\n\r\n\t\t\t// Set the accordion id data attribute.\r\n\t\t\tthis_accordion_element.setAttribute(Accordion.constants.id_attribute, accordion_next_id);\r\n\t\t\t// Set this accordion selector by accordion id attribute.\r\n\t\t\tthis_accordion_data.unique_selector = '[' + Accordion.constants.id_attribute + '=\"' + accordion_next_id + '\"]';\r\n\r\n\t\t\t//\r\n\t\t\t// Item\r\n\t\t\t//\r\n\r\n\t\t\t// Get accordion items.\r\n\t\t\tconst accordion_items = this_accordion_element.querySelectorAll(this_accordion_data.selector + ' > ' + options.selectors.item);\r\n\t\t\t// Attach the accordion items to the accordion element.\r\n\t\t\tthis_accordion_element.accordion_items = accordion_items;\r\n\t\t\t// For each accordion item.\r\n\t\t\tfor(let accordion_item = 0; accordion_item < accordion_items.length; accordion_item++) {\r\n\t\t\t\t// Get this current item element in the accordion.\r\n\t\t\t\tconst this_accordion_item = accordion_items[accordion_item];\r\n\t\t\t\t// Attach the accordion parent to the accordion item element.\r\n\t\t\t\tthis_accordion_item.accordion_parent = this_accordion_element;\r\n\t\t\t\t// Initialize item state values.\r\n\t\t\t\tlet item_state_attrubute_value = 'closed';\r\n\t\t\t\tlet aria_hidden_value = 'true';\r\n\t\t\t\tlet aria_expanded_value = 'false';\r\n\t\t\t\t// If this is the first accordion item and the first item default open option is set to true.\r\n\t\t\t\tif(accordion_item === 0 && options.first_item_default_open) {\r\n\t\t\t\t\t// Set the state values as open for the accordion item.\r\n\t\t\t\t\titem_state_attrubute_value = 'opened';\r\n\t\t\t\t\taria_hidden_value = 'false';\r\n\t\t\t\t\taria_expanded_value = 'true';\r\n\t\t\t\t}\r\n\t\t\t\t// Set the item state.\r\n\t\t\t\tthis_accordion_item.setAttribute(Accordion.item_state_attrubute, item_state_attrubute_value);\r\n\r\n\t\t\t\t//\r\n\t\t\t\t// Content\r\n\t\t\t\t//\r\n\r\n\t\t\t\t// Get accordion item content.\r\n\t\t\t\tconst accordion_item_content = this_accordion_item.querySelector(options.selectors.content);\r\n\t\t\t\t// Attach the accordion item content to the accordion item element.\r\n\t\t\t\tthis_accordion_item.accordion_item_content = accordion_item_content;\r\n\t\t\t\t// Attach the accordion parent to the accordion item content element.\r\n\t\t\t\taccordion_item_content.accordion_parent = this_accordion_element;\r\n\t\t\t\t// Attach the accordion item parent to the accordion item content element.\r\n\t\t\t\taccordion_item_content.accordion_item_parent = this_accordion_item;\r\n\t\t\t\t// Get the next available accordion id.\r\n\t\t\t\tconst accordion_item_content_uuid = uuid();\r\n\t\t\t\t// Set the accordion item content id.\r\n\t\t\t\taccordion_item_content.id = accordion_item_content_uuid;\r\n\t\t\t\t// Set the accordion item content aria-hidden attribute.\r\n\t\t\t\taccordion_item_content.setAttribute('aria-hidden', aria_hidden_value);\r\n\r\n\t\t\t\t//\r\n\t\t\t\t// Heading\r\n\t\t\t\t//\r\n\r\n\t\t\t\t// Get accordion item heading.\r\n\t\t\t\tconst accordion_item_heading = this_accordion_item.querySelector(options.selectors.heading);\r\n\t\t\t\t// Attach the accordion item heading to the accordion item element.\r\n\t\t\t\tthis_accordion_item.accordion_item_heading = accordion_item_heading;\r\n\t\t\t\t// Attach the accordion parent to the accordion item heading element.\r\n\t\t\t\taccordion_item_heading.accordion_parent = this_accordion_element;\r\n\t\t\t\t// Attach the accordion item parent to the accordion item heading element.\r\n\t\t\t\taccordion_item_heading.accordion_item_parent = this_accordion_item;\r\n\t\t\t\t// Set the accordion item heading role attribute.\r\n\t\t\t\taccordion_item_heading.setAttribute('role', 'heading');\r\n\t\t\t\t// Set the accordion item heading aria-controls attribute to the accordion item content id.\r\n\t\t\t\taccordion_item_heading.setAttribute('aria-controls', accordion_item_content.id);\r\n\t\t\t\t// Set the accordion item heading aria-level attribute.\r\n\t\t\t\taccordion_item_heading.setAttribute('aria-level', accordion_level);\r\n\t\t\t\t// Set the accordion item heading aria-expanded attribute.\r\n\t\t\t\taccordion_item_heading.setAttribute('aria-expanded', aria_expanded_value);\r\n\t\t\t\t// Add click event listener to toggle the accordion item opened/closed state.\r\n\t\t\t\taccordion_item_heading.addEventListener('click', Accordion.headingClickEventHandler);\r\n\t\t\t\t// Add key down event listener for switching between accordion items and accessibility.\r\n\t\t\t\taccordion_item_heading.addEventListener('keydown', Accordion.headingKeyDownEventHandler);\r\n\r\n\t\t\t} // End loop: accordion_items.\r\n\r\n\t\t\t// Set the accordion aria-label attribute.\r\n\t\t\tthis_accordion_element.setAttribute('aria-label', this_accordion_data.options.aria_label);\r\n\r\n\t\t\t// Get the closest parent accordion.\r\n\t\t\t// Closest must be called on the parent node to prevent it from returning the node it's being called form.\r\n\t\t\taccordion_parent = this_accordion_element.parentNode.closest('[' + Accordion.constants.id_attribute + ']');\r\n\t\t\t// If a parent accordion exists.\r\n\t\t\tif(accordion_parent) {\r\n\t\t\t\t// Add one to the parent aria-level for the current accordion aria-level.\r\n\t\t\t\taccordion_nested_level = Accordion.nestedLevel(accordion_parent) + 1;\r\n\t\t\t}\r\n\t\t\t// If there is no parent accordion (the accordion is not nested in another accordion).\r\n\t\t\telse {\r\n\t\t\t\t// Set the accordion aria-level attribute value.\r\n\t\t\t\taccordion_nested_level = 1;\r\n\t\t\t}\r\n\t\t\t// Set this accordion and nested accordion's nested level.\r\n\t\t\tAccordion.nestedLevel(this_accordion_element, accordion_nested_level);\r\n\r\n\t\t\t// Get all accordion children elements.\r\n\t\t\taccordion_children = this_accordion_element.querySelectorAll('[' + Accordion.constants.id_attribute + ']');\r\n\t\t\t// For each child accordion.\r\n\t\t\tfor(let accordion_child = 0; accordion_child < accordion_children.length; accordion_child++) {\r\n\t\t\t\t// Get this current child accordion element.\r\n\t\t\t\tthis_accordion_child_element = accordion_children[accordion_child];\r\n\t\t\t\t// Get the current aria-level.\r\n\t\t\t\tconst current_aria_level = parseInt(this_aria_level_element.getAttribute('aria-level'));\r\n\t\t\t\t// Set a new aria-level one greater than before.\r\n\t\t\t\tthis_aria_level_element.setAttribute('aria-level', (current_aria_level + 1));\r\n\t\t\t}\r\n\r\n\t\t} // End loop accordion_elements.\r\n\r\n\t} // End function: initialize.\r\n};\r\n\r\n// If script is being required as a node module.\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\t// Export the AceAccordion class.\r\n\tmodule.exports = AceAccordion;\r\n}\r\n\n\n//# sourceURL=webpack://AceAccordion/./src/js/ace-accordion.js?");

/***/ }),

/***/ "./src/js/item.js":
/*!************************!*\
  !*** ./src/js/item.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * Defines an Item.\r\n */\r\n\r\nconst Item = class {\r\n\r\n\t/**\r\n\t * Defines a set of constant class variables.\r\n\t */\r\n\r\n\tstatic get constants() {\r\n\t\treturn {\r\n\t\t\tstate_attrubute: 'data-item-state'\r\n\t\t};\r\n\t} // End: constants\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tget options() {\r\n\t\t// Return options from the parent Accordion.\r\n\t\treturn this.accordion.options;\r\n\t} // End: get options\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tset state(state) {\r\n\t\tif (state === 'opened' || state === 'opening' || state === 'closing' || state === 'closed') {\r\n\t\t\tthis.element.setAttribute(this.constructor.constants.state_attrubute, state);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn('invalid state');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} // End: set state\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tget state() {\r\n\t\t// Returns null if attribute is not set.\r\n\t\treturn this.element.getAttribute(this.constructor.constants.state_attrubute);\r\n\t} // End get state\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tget index() {\r\n\t\t// Get the item elements in the accordion and convert the result into an array.\r\n\t\tlet item_elements = Array.from(this.accordion.element.querySelectorAll(this.accordion.selector + ' > ' + this.options.selectors.item));\r\n\t\t// Return the index of the item.\r\n\t\t// Will return negative one if the item cannot be found.\r\n\t\treturn item_elements.indexOf(this.element);\r\n\t} // End: get index\r\n\r\n\t/**\r\n\t * Check if this item matches the criteria.\r\n\t */\r\n\r\n\tmatches(criteria) {\r\n\r\n\t\t// If the criteria is a node list.\r\n\t\tif (criteria instanceof NodeList) {\r\n\t\t\t// Convert the criteria into an array.\r\n\t\t\tcriteria = Array.from(criteria);\r\n\t\t}\r\n\r\n\t\t// If the criteria is an array.\r\n\t\tif (Array.isArray(criteria)) {\r\n\t\t\t// For each value in the criteria array.\r\n\t\t\tfor (let value = 0; value < criteria.length; value++) {\r\n\t\t\t\t// If the recursive call matches the criteria to the item.\r\n\t\t\t\tif (this.matches(criteria[value])) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the criteria is a number (index).\r\n\t\telse if (typeof criteria === 'number') {\r\n\t\t\t// If the criteria is an integer.\r\n\t\t\tif (Number.isInteger(criteria)) {\r\n\t\t\t\t// If the criteria is greater than or equal to zero.\r\n\t\t\t\tif (criteria >= 0) {\r\n\t\t\t\t\t// If the item matches the criteria index.\r\n\t\t\t\t\tif (this.index === criteria) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the criteria is a string (selector).\r\n\t\telse if (typeof criteria === 'string') {\r\n\t\t\t// If the item matches the criteria selector.\r\n\t\t\tif (this.element.matches(criteria)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the criteria is an element.\r\n\t\telse if (criteria instanceof Element) {\r\n\t\t\t// If the item matches the criteria element.\r\n\t\t\tif (this.element === criteria) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the item does not match the criteria.\r\n\t\treturn false;\r\n\r\n\t} // End: matches\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tconstructor(accordion, item_element) {\r\n\r\n\t\t// Set a reference to the Accordion.\r\n\t\tthis.accordion = accordion;\r\n\r\n\t\t// Add the item element reference.\r\n\t\tthis.element = item_element;\r\n\r\n\t\t// Initialize the item state.\r\n\t\tlet initial_state = 'closed';\r\n\r\n\t\t// Get the default_open_items options value.\r\n\t\tconst default_open_items = this.options.default_open_items;\r\n\t\t// If the option value is not false, null, or undefined.\r\n\t\tif (default_open_items !== false || default_open_items !== null || typeof default_open_items !== 'undefined') {\r\n\t\t\t// If the element matches the default_open_items value.\r\n\t\t\tif (this.matches(default_open_items)) {\r\n\t\t\t\t// Set the item state value to opened.\r\n\t\t\t\tinitial_state = 'opened';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//\r\n\t\tthis.state = initial_state;\r\n\r\n\t\t// If debug is true.\r\n\t\tif (this.accordion.ace_accordion.options.debug) {\r\n\t\t\t// Log the classes.\r\n\t\t\tconsole.log('Debug: Item Class:');\r\n\t\t\tconsole.dir(this.constructor);\r\n\t\t\t// Log the instance.\r\n\t\t\tconsole.log('Debug: AceAccordion - ' + this.accordion.ace_accordion.id + ':');\r\n\t\t\tconsole.log('Debug: Accordion - ' + this.accordion.id + ':');\r\n\t\t\tconsole.dir(this);\r\n\t\t}\r\n\r\n\t\t// Return this instance.\r\n\t\treturn this;\r\n\r\n\t} // End: constructor\r\n\r\n};\r\n\r\n// Export the Item class.\r\nmodule.exports = Item;\n\n//# sourceURL=webpack://AceAccordion/./src/js/item.js?");

/***/ })

/******/ });