var Accordion =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/accordion.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@alexspirgel/extend/extend.js":
/*!****************************************************!*\
  !*** ./node_modules/@alexspirgel/extend/extend.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * extend v2.0.0\r\n * https://github.com/alexspirgel/extend\r\n */\r\n\r\n/**\r\n * Extends an object with another object(s).\r\n *\r\n * @param {array} objects - Array of objects containing the resulting object and the objects to merge into it.\r\n * @param {boolean} [deep] - Optional flag to enable or disable recursive merge.\r\n *\r\n * @returns {object} The object that has been extended.\r\n */\r\n\r\nconst extend = (objects, deep) => {\r\n\r\n\t/**\r\n\t * Extends an object with another object.\r\n\t *\r\n\t * @param {object} target_object - The target object to be merged into.\r\n\t * @param {object} merge_object - The object to merge into the target object.\r\n\t * @param {boolean} [deep] - Optional flag to enable or disable recursive merge.\r\n\t *\r\n\t * @returns {object} The object that has been extended.\r\n\t */\r\n\r\n\tconst extendObject = (target_object, merge_object, deep) => {\r\n\t\t// For each property in the merge_object.\r\n\t\tfor (let property in merge_object) {\r\n\t\t\t// If the merge_object value is an object, is not null, and the deep flag is true.\r\n\t\t\tif (typeof merge_object[property] === 'object' && merge_object[property] !== null && deep) {\r\n\t\t\t\t// If the merge_object value is a special case.\r\n\t\t\t\tif (merge_object[property].toString() === '[object Window]' || merge_object[property].toString() === '[object HTMLDocument]') {\r\n\t\t\t\t\t// Set the target_object property value equal to the merge_object property value.\r\n\t\t\t\t\ttarget_object[property] = merge_object[property];\r\n\t\t\t\t\t// Continue past the normal deep object handling.\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// If the merge_object value is an array.\r\n\t\t\t\tif (Array.isArray(merge_object[property])) {\r\n\t\t\t\t\t// Set the target_object value equal to an empty array (arrays are replaced, not merged).\r\n\t\t\t\t\ttarget_object[property] = [];\r\n\t\t\t\t}\r\n\t\t\t\t// If the target_object value is not an object or if it is null.\r\n\t\t\t\telse if (typeof target_object[property] !== 'object' || target_object[property] === null) {\r\n\t\t\t\t\t// Set the target_object value equal to an empty object.\r\n\t\t\t\t\ttarget_object[property] = {};\r\n\t\t\t\t}\r\n\t\t\t\t// Call the extendObject function recursively.\r\n\t\t\t\textendObject(target_object[property], merge_object[property], deep);\r\n\t\t\t\t// Continue to the next property, skipping the normal value assignment.\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Set the target_object property value equal to the merge_object property value (primitive values or shallow calls).\r\n\t\t\ttarget_object[property] = merge_object[property];\r\n\t\t}\r\n\t\t// Return the target_object.\r\n\t\treturn target_object;\r\n\t}; // End function extendObject.\r\n\r\n\t// If objects length is greater than 1.\r\n\tif (objects.length > 1) {\r\n\t\t// For each object in objects (skipping the first object).\r\n\t\tfor (let object = 1; object < objects.length; object++) {\r\n\t\t\t// If the current loop item is an object and not null.\r\n\t\t\tif (typeof objects[object] === 'object' && objects[object] !== null) {\r\n\t\t\t\t// Extend the first object with the current loop object.\r\n\t\t\t\textendObject(objects[0], objects[object], deep);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// Return the first object in the array.\r\n\treturn objects[0];\r\n\r\n}; // End function extend.\r\n\r\n// If script is being required as a node module.\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\t// Export the extend function.\r\n\tmodule.exports = extend;\r\n}\n\n//# sourceURL=webpack://Accordion/./node_modules/@alexspirgel/extend/extend.js?");

/***/ }),

/***/ "./src/js/accordion.js":
/*!*****************************!*\
  !*** ./src/js/accordion.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\r\n * Accordion v1.0.0\r\n * https://github.com/alexspirgel/accordion\r\n */\r\n\r\n// Import uuidv4 function.\r\n// import {uuid} from '../uuid/uuid,js';\r\n/*\r\nhttps://stackoverflow.com/a/2117523\r\nhttps://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\r\n*/\r\nconst uuid = () => {\r\n\treturn ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\r\n};\r\n\r\n// Require extend function.\r\nconst extend = __webpack_require__(/*! @alexspirgel/extend */ \"./node_modules/@alexspirgel/extend/extend.js\");\r\n\r\n/**\r\n * Defines an accordion.\r\n */\r\n\r\nconst Accordion = class {\r\n\r\n\tstatic get options_default() {\r\n\t\tconst options_default = {\r\n\t\t\t\"selectors\": {\t\r\n\t\t\t\t\"accordion\": \".accordion\",\r\n\t\t\t\t\"item\": \".accordion__item\",\r\n\t\t\t\t\"heading\": \".accordion__item__heading\",\r\n\t\t\t\t\"content\": \".accordion__item__content\"\r\n\t\t\t},\r\n\t\t\t\"aria_label\": \"Accordion item group.\",\r\n\t\t\t\"allow_multiple_open_items\": true,\r\n\t\t\t\"first_item_default_open\": false,\r\n\t\t\t\"close_child_items\": false,\r\n\t\t\t// \"scroll_to_top\": {\r\n\t\t\t// \t\"enabled\": true,\r\n\t\t\t// \t\"scroll_element\": window,\r\n\t\t\t// \t\"transition\": {\r\n\t\t\t// \t\t\"enabled\": true,\r\n\t\t\t// \t\t\"duration\": 500, // Transition duration in milliseconds.\r\n\t\t\t// \t\t\"cancel_on_scroll\": true,\r\n\t\t\t// \t\t\"easing_function\": (t) => {return t<0.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1;} // Ease In Out Cubic.\r\n\t\t\t// \t}\r\n\t\t\t// },\r\n\t\t\t// \"callbacks\": {\r\n\t\t\t// \t\"accordion\": {\r\n\t\t\t// \t\t\"initialize\": {\r\n\t\t\t// \t\t\t\"before\": (accordion_element, accordion_object) => {},\r\n\t\t\t// \t\t\t\"after\": (accordion_element, accordion_object) => {}\r\n\t\t\t// \t\t}\r\n\t\t\t// \t},\r\n\t\t\t// \t\"item\": {\r\n\t\t\t// \t\t\"initialize\": {\r\n\t\t\t// \t\t\t\"before\": (item_element, accordion_object) => {},\r\n\t\t\t// \t\t\t\"after\": (item_element, accordion_object) => {}\r\n\t\t\t// \t\t},\r\n\t\t\t// \t\t\"open\": {\r\n\t\t\t// \t\t\t\"before\": (item_element, accordion_object) => {},\r\n\t\t\t// \t\t\t\"after\": (item_element, accordion_object) => {}\r\n\t\t\t// \t\t},\r\n\t\t\t// \t\t\"close\": {\r\n\t\t\t// \t\t\t\"before\": (item_element, accordion_object) => {},\r\n\t\t\t// \t\t\t\"after\": (item_element, accordion_object) => {}\r\n\t\t\t// \t\t}\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\t}; // End variable: options_default.\r\n\t\t// Return the default options.\r\n\t\treturn options_default;\r\n\t}\r\n\r\n\tconstructor(options_user) {\r\n\r\n\t\t// Set the input user options object.\r\n\t\tthis.options_user = options_user;\r\n\t\t// Merge default options and user options into new object using the imported extend function.\r\n\t\tthis.options = extend([{}, Accordion.options_default, this.options_user], true);\r\n\t\t// Initialize the accordion with the merged options.\r\n\t\tthis.initialize(this.options);\r\n\t\t// Return the reference to the accordion class instance.\r\n\t\treturn this;\r\n\r\n\t} // End function: constructor.\r\n\r\n\t/**\r\n\t * Static properties\r\n\t */\r\n\r\n\tstatic get id_attribute() {\r\n\t\treturn 'data-accordion-id';\r\n\t}\r\n\r\n\tstatic get item_state_attrubute() {\r\n\t\treturn 'data-accordion-item-state';\r\n\t}\r\n\r\n\t/**\r\n\t * Handles a click event on an accordion item heading.\r\n\t */\r\n\r\n\tstatic headingClickEventHandler(event) {\r\n\t\t// Get the accordion parent item.\r\n\t\tconst accordion_item = event.target.accordion_item_parent;\r\n\t\t// Toggle the accordion item.\r\n\t\tAccordion.toggleItem(accordion_item);\r\n\t} // End function: headingClickEventHandler.\r\n\r\n\t/**\r\n\t * Handles a key down event on an accordion item heading.\r\n\t */\r\n\r\n\tstatic headingKeyDownEventHandler(event) {\r\n\t\t// Get the accordion parent item.\r\n\t\tconst accordion_item = event.target.accordion_item_parent;\r\n\t\tswitch(event.keyCode) {\r\n\t\t\t// If key code is up arrow.\r\n\t\t\tcase 38:\r\n\t\t\t\tAccordion.focusItem(accordion_item, 'previous');\r\n\t\t\t\tbreak;\r\n\t\t\t// If key code is down arrow.\r\n\t\t\tcase 40:\r\n\t\t\t\tAccordion.focusItem(accordion_item, 'next');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} // End function: headingKeyDownEventHandler.\r\n\r\n\t/**\r\n\t * Handles an open transition end event.\r\n\t */\r\n\r\n\tstatic headingOpenTransitionEndEventHandler(event) {\r\n\t\tconst accordion_parent = event.target.accordion_parent;\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\tif(event.target.matches(accordion_options.selectors.item)){\r\n\t\t\t\tAccordion.finishOpeningItem(event.target);\r\n\t\t}\r\n\t} // End function: headingOpenTransitionEndEventHandler.\r\n\r\n\t/**\r\n\t * Handles a close transition end event.\r\n\t */\r\n\r\n\tstatic headingCloseTransitionEndEventHandler(event) {\r\n\t\tconst accordion_parent = event.target.accordion_parent;\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\tif(event.target.matches(accordion_options.selectors.item)){\r\n\t\t\t\tAccordion.finishClosingItem(event.target);\r\n\t\t}\r\n\t} // End function: headingCloseTransitionEndEventHandler.\r\n\r\n\tstatic openItem(accordion_item, skip_transition) {\r\n\r\n\t\t// Remove the close transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingCloseTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Get the accordion options.\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\r\n\t\t// If multiple open items are not allowed.\r\n\t\tif(accordion_options.allow_multiple_open_items === false) {\r\n\t\t\t// Get all the accordion items within this accordion.\r\n\t\t\tconst accordion_items = accordion_parent.children;\r\n\t\t\t// For each accordion item.\r\n\t\t\tfor(let accordion_item = 0; accordion_item < accordion_items.length; accordion_item++) {\r\n\t\t\t\t// If the accordion item is open or opening.\r\n\t\t\t\tif(accordion_items[accordion_item].matches('[' + Accordion.item_state_attrubute + '=\"opening\"], [' + Accordion.item_state_attrubute + '=\"opened\"]')) {\r\n\t\t\t\t\t// Close the accordion item.\r\n\t\t\t\t\tAccordion.closeItem(accordion_items[accordion_item]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} // End option: allow_multiple_open_items.\r\n\r\n\t\t// Get the current item height.\r\n\t\tconst item_height_start = accordion_item.offsetHeight;\r\n\t\t// Set the item to its current height, keeping it at that height.\r\n\t\taccordion_item.style.height = item_height_start + 'px';\r\n\t\t// Set the accordion item state attribute to show the beginning of the opening process.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'opening');\r\n\t\t// Set the related aria attributes to show the accordion is open.\r\n\t\taccordion_item.accordion_item_heading.setAttribute('aria-expanded', 'true');\r\n\t\taccordion_item.accordion_item_content.setAttribute('aria-hidden', 'false');\r\n\r\n\t\t// Skip transition is true.\r\n\t\tif(skip_transition) {\r\n\t\t\t// Finish opening the item immediately, disregarding transitions.\r\n\t\t\tAccordion.finishOpeningItem(accordion_item);\r\n\t\t}\r\n\t\t// If skip transition is false or not passed, continue with the transition as normal.\r\n\t\telse {\r\n\t\t\t// Get the height of the accordion heading.\r\n\t\t\tconst item_heading_height = accordion_item.accordion_item_heading.offsetHeight;\r\n\t\t\t// Get the height of the accordion content.\r\n\t\t\tconst item_content_height = accordion_item.accordion_item_content.offsetHeight;\r\n\t\t\t// Calculate the end height for the accordion item.\r\n\t\t\tconst item_height_end = item_heading_height + item_content_height;\r\n\t\t\t// Add an open transitionend event listener to the accordion item.\r\n\t\t\taccordion_item.addEventListener('transitionend', Accordion.headingOpenTransitionEndEventHandler);\r\n\t\t\t// Set the accordion item to it's end height.\r\n\t\t\taccordion_item.style.height = item_height_end + 'px';\r\n\t\t}\r\n\r\n\t} // End function: openItem.\r\n\r\n\t/**\r\n\t * Finish opening the accordion item.\r\n\t */\r\n\r\n\tstatic finishOpeningItem(accordion_item) {\r\n\t\t// Remove the open transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingOpenTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Remove the explicit height (should default back to auto).\r\n\t\taccordion_item.style.removeProperty('height');\r\n\t\t// Set the accordion item state attribute to show the item has finished opening.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'opened');\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\tstatic closeItem(accordion_item, skip_transition) {\r\n\r\n\t\t// Remove the open transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingOpenTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Get the accordion options.\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\t// Get the current item height.\r\n\t\tconst item_height_start = accordion_item.offsetHeight;\r\n\t\t// Set the item to its current height.\r\n\t\taccordion_item.style.height = item_height_start + 'px';\r\n\t\t// Set the accordion item state attribute to show the beginning of the closing process.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'closing');\r\n\t\t// Set the related aria attributes to show the accordion is closed.\r\n\t\taccordion_item.accordion_item_heading.setAttribute('aria-expanded', 'false');\r\n\t\taccordion_item.accordion_item_content.setAttribute('aria-hidden', 'true');\r\n\r\n\t\t// Skip transition is true.\r\n\t\tif(skip_transition) {\r\n\t\t\t// Finish closing the item immediately, disregarding transitions.\r\n\t\t\t// The passed argument must mimic the event listener event.\r\n\t\t\tAccordion.finishClosingItem(accordion_item);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Get the height of the accordion heading.\r\n\t\t\tconst item_heading_height = accordion_item.accordion_item_heading.offsetHeight;\r\n\t\t\t// Add a close transitionend event listener to the accordion item.\r\n\t\t\taccordion_item.addEventListener('transitionend', Accordion.headingCloseTransitionEndEventHandler);\r\n\t\t\t// Set the accordion item to it's heading height.\r\n\t\t\taccordion_item.style.height = item_heading_height + 'px';\r\n\t\t}\r\n\r\n\t} // End function: closeItem.\r\n\r\n\t/**\r\n\t * Finish closing the accordion item.\r\n\t */\r\n\r\n\tstatic finishClosingItem(accordion_item) {\r\n\t\t// Remove the close transitionend event listener.\r\n\t\taccordion_item.removeEventListener('transitionend', Accordion.headingCloseTransitionEndEventHandler);\r\n\t\t// Get the accordion element.\r\n\t\tconst accordion_parent = accordion_item.accordion_parent;\r\n\t\t// Get the accordion options.\r\n\t\tconst accordion_options = accordion_parent.accordion_options;\r\n\t\t// Remove the explicit height (should default back to auto).\r\n\t\taccordion_item.style.removeProperty('height');\r\n\t\t// Set the accordion item state attribute to show the item has finished closing.\r\n\t\taccordion_item.setAttribute(Accordion.item_state_attrubute, 'closed');\r\n\r\n\t\t// If the close item children is true.\r\n\t\tif(accordion_options.close_child_items === true) {\r\n\t\t\t// Get nested accordions.\r\n\t\t\tconst nested_accordions = accordion_item.querySelectorAll('[' + Accordion.id_attribute + ']');\r\n\t\t\t// For each nested accordion.\r\n\t\t\tfor(let nested_accordion = 0; nested_accordion < nested_accordions.length; nested_accordion++) {\r\n\t\t\t\t// Get this current nested accordion.\r\n\t\t\t\tconst this_nested_accordion = nested_accordions[nested_accordion];\r\n\t\t\t\t// Get this nested accordion parent accordion.\r\n\t\t\t\tconst this_nested_accordion_parent_accordion = this_nested_accordion.parentNode.closest('[' + Accordion.id_attribute + ']');\r\n\t\t\t\t// If the parent accordion matches the original item parent accordion. This ensures we only select accordions one level away.\r\n\t\t\t\tif(this_nested_accordion_parent_accordion === accordion_parent) {\r\n\t\t\t\t\t// For each item in the nested accordion.\r\n\t\t\t\t\tfor(let nested_item = 0; nested_item < this_nested_accordion.accordion_items.length; nested_item++) {\r\n\t\t\t\t\t\t// Get the current nested item.\r\n\t\t\t\t\t\tconst this_nested_item = this_nested_accordion.accordion_items[nested_item];\r\n\t\t\t\t\t\t// Close the nested item.\r\n\t\t\t\t\t\tAccordion.closeItem(this_nested_item, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} // End option: close_child_items.\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Opens or closes an accordion item based on it's current state.\r\n\t */\r\n\r\n\tstatic toggleItem(accordion_item) {\r\n\t\t// Get the current accordion item state.\r\n\t\tconst accordion_item_state = accordion_item.getAttribute(Accordion.item_state_attrubute);\r\n\t\t// If the accordion item is currently closed.\r\n\t\tif(accordion_item_state === 'closed' || accordion_item_state === 'closing') {\r\n\t\t\t// Open the accordion item.\r\n\t\t\tAccordion.openItem(accordion_item);\r\n\t\t}\r\n\t\t// If the accordion is currently opening.\r\n\t\telse if(accordion_item_state === 'opening' || accordion_item_state === 'opened') {\r\n\t\t\t// Close the accordion item.\r\n\t\t\tAccordion.closeItem(accordion_item);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user focus on a specific accordion item or the previous or next item within the accordion.\r\n\t */\r\n\r\n\tstatic focusItem(accordion_item, option) {\r\n\t\tlet item_to_focus = accordion_item;\r\n\t\tif(option) {\r\n\t\t\tconst accordion_items_list = accordion_item.accordion_parent.accordion_items;\r\n\t\t\tfor(let i = 0; i < accordion_items_list.length; i++) {\r\n\t\t\t\tif(accordion_items_list[i] === accordion_item) {\r\n\t\t\t\t\tif(option === 'previous' && i > 0) {\r\n\t\t\t\t\t\titem_to_focus = accordion_items_list[i - 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(option === 'next' && i < (accordion_items_list.length - 1)) {\r\n\t\t\t\t\t\titem_to_focus = accordion_items_list[i + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// console.log('There is no ' + option + ' item in this accordion.');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\titem_to_focus.accordion_item_heading.focus();\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an accordion.\r\n\t *\r\n\t * @param {object} options - The merged options used to configure the accordion.\r\n\t */\r\n\r\n\tinitialize(options) {\r\n\t\t\r\n\t\t//\r\n\t\t// Accordion\r\n\t\t//\r\n\r\n\t\t// Get the accordion element(s).\r\n\t\tconst accordion_elements = document.querySelectorAll(options.selectors.accordion);\r\n\t\t// For each accordion.\r\n\t\tfor(let accordion_element = 0; accordion_element < accordion_elements.length; accordion_element++) {\r\n\t\t\t// Get this current accordion element for the loop.\r\n\t\t\tconst this_accordion_element = accordion_elements[accordion_element];\r\n\t\t\t// Attach the accordion options to the accordion element.\r\n\t\t\tthis_accordion_element.accordion_options = options;\r\n\t\t\t// Generate UUID.\r\n\t\t\tconst this_accordion_uuid = uuid();\r\n\t\t\t// Set this accordion selector by identifier attribute UUID.\r\n\t\t\tconst this_accordion_selector = '[' + Accordion.id_attribute + '=\"' + this_accordion_uuid + '\"]';\r\n\t\t\t// Set the universal accordion identifier data attribute.\r\n\t\t\tthis_accordion_element.setAttribute(Accordion.id_attribute, this_accordion_uuid);\r\n\t\t\t// Set the accordion aria-label attribute.\r\n\t\t\tthis_accordion_element.setAttribute('aria-label', options.aria_label);\r\n\t\t\t// Initialize accordion aria-level attribute value.\r\n\t\t\tlet accordion_level = 1;\r\n\t\t\t// Get the closest accordion (parent) that is not this accordion.\r\n\t\t\tconst parent_accordion = this_accordion_element.closest('[' + Accordion.id_attribute + ']:not(' + this_accordion_selector + ')');\r\n\t\t\t// If a parent accordion exists.\r\n\t\t\tif(parent_accordion) {\r\n\t\t\t\t// Get the parent accordion first heading element.\r\n\t\t\t\tconst parent_heading = parent_accordion.querySelector(parent_accordion.accordion_options.selectors.heading);\r\n\t\t\t\t// Get the parent accordion heading aria-level.\r\n\t\t\t\tconst parent_heading_aria_level = parent_heading.getAttribute('aria-level');\r\n\t\t\t\t// Add one to the parent aria-level for the current level.\r\n\t\t\t\taccordion_level = parseInt(parent_heading_aria_level) + 1;\r\n\t\t\t}\r\n\t\t\t// Get all child accordion elements with aria-level.\r\n\t\t\tconst aria_level_elements = this_accordion_element.querySelectorAll('[' + Accordion.id_attribute + '] [aria-level]');\r\n\t\t\t// For each aria-level element.\r\n\t\t\tfor(let aria_level_element = 0; aria_level_element < aria_level_elements.length; aria_level_element++) {\r\n\t\t\t\t// Get this current aria-level element.\r\n\t\t\t\tconst this_aria_level_element = aria_level_elements[aria_level_element];\r\n\t\t\t\t// Get the current aria-level.\r\n\t\t\t\tconst current_aria_level = parseInt(this_aria_level_element.getAttribute('aria-level'));\r\n\t\t\t\t// Set a new aria-level one greater than before.\r\n\t\t\t\tthis_aria_level_element.setAttribute('aria-level', (current_aria_level + 1));\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\t\t\t// Item\r\n\t\t\t//\r\n\r\n\t\t\t// Get accordion items.\r\n\t\t\tconst accordion_items = this_accordion_element.querySelectorAll(this_accordion_selector + ' > ' + options.selectors.item);\r\n\t\t\t// Attach the accordion items to the accordion element.\r\n\t\t\tthis_accordion_element.accordion_items = accordion_items;\r\n\t\t\t// For each accordion item.\r\n\t\t\tfor(let accordion_item = 0; accordion_item < accordion_items.length; accordion_item++) {\r\n\t\t\t\t// Get this current item element in the accordion.\r\n\t\t\t\tconst this_accordion_item = accordion_items[accordion_item];\r\n\t\t\t\t// Attach the accordion parent to the accordion item element.\r\n\t\t\t\tthis_accordion_item.accordion_parent = this_accordion_element;\r\n\t\t\t\t// Initialize item state values.\r\n\t\t\t\tlet item_state_attrubute_value = 'closed';\r\n\t\t\t\tlet aria_hidden_value = 'true';\r\n\t\t\t\tlet aria_expanded_value = 'false';\r\n\t\t\t\t// If this is the first accordion item and the first item default open option is set to true.\r\n\t\t\t\tif(accordion_item === 0 && options.first_item_default_open) {\r\n\t\t\t\t\t// Set the state values as open for the accordion item.\r\n\t\t\t\t\titem_state_attrubute_value = 'opened';\r\n\t\t\t\t\taria_hidden_value = 'false';\r\n\t\t\t\t\taria_expanded_value = 'true';\r\n\t\t\t\t}\r\n\t\t\t\t// Set the item state.\r\n\t\t\t\tthis_accordion_item.setAttribute(Accordion.item_state_attrubute, item_state_attrubute_value);\r\n\r\n\t\t\t\t//\r\n\t\t\t\t// Content\r\n\t\t\t\t//\r\n\r\n\t\t\t\t// Get accordion item content.\r\n\t\t\t\tconst accordion_item_content = this_accordion_item.querySelector(options.selectors.content);\r\n\t\t\t\t// Attach the accordion item content to the accordion item element.\r\n\t\t\t\tthis_accordion_item.accordion_item_content = accordion_item_content;\r\n\t\t\t\t// Attach the accordion parent to the accordion item content element.\r\n\t\t\t\taccordion_item_content.accordion_parent = this_accordion_element;\r\n\t\t\t\t// Attach the accordion item parent to the accordion item content element.\r\n\t\t\t\taccordion_item_content.accordion_item_parent = this_accordion_item;\r\n\t\t\t\t// Get the next available accordion id.\r\n\t\t\t\tconst accordion_item_content_uuid = uuid();\r\n\t\t\t\t// Set the accordion item content id.\r\n\t\t\t\taccordion_item_content.id = accordion_item_content_uuid;\r\n\t\t\t\t// Set the accordion item content aria-hidden attribute.\r\n\t\t\t\taccordion_item_content.setAttribute('aria-hidden', aria_hidden_value);\r\n\r\n\t\t\t\t//\r\n\t\t\t\t// Heading\r\n\t\t\t\t//\r\n\r\n\t\t\t\t// Get accordion item heading.\r\n\t\t\t\tconst accordion_item_heading = this_accordion_item.querySelector(options.selectors.heading);\r\n\t\t\t\t// Attach the accordion item heading to the accordion item element.\r\n\t\t\t\tthis_accordion_item.accordion_item_heading = accordion_item_heading;\r\n\t\t\t\t// Attach the accordion parent to the accordion item heading element.\r\n\t\t\t\taccordion_item_heading.accordion_parent = this_accordion_element;\r\n\t\t\t\t// Attach the accordion item parent to the accordion item heading element.\r\n\t\t\t\taccordion_item_heading.accordion_item_parent = this_accordion_item;\r\n\t\t\t\t// Set the accordion item heading role attribute.\r\n\t\t\t\taccordion_item_heading.setAttribute('role', 'heading');\r\n\t\t\t\t// Set the accordion item heading aria-controls attribute to the accordion item content id.\r\n\t\t\t\taccordion_item_heading.setAttribute('aria-controls', accordion_item_content.id);\r\n\t\t\t\t// Set the accordion item heading aria-level attribute.\r\n\t\t\t\taccordion_item_heading.setAttribute('aria-level', accordion_level);\r\n\t\t\t\t// Set the accordion item heading aria-expanded attribute.\r\n\t\t\t\taccordion_item_heading.setAttribute('aria-expanded', aria_expanded_value);\r\n\t\t\t\t// Add click event listener to toggle the accordion item opened/closed state.\r\n\t\t\t\taccordion_item_heading.addEventListener('click', Accordion.headingClickEventHandler);\r\n\t\t\t\t// Add key down event listener for switching between accordion items and accessibility.\r\n\t\t\t\taccordion_item_heading.addEventListener('keydown', Accordion.headingKeyDownEventHandler);\r\n\r\n\t\t\t} // End loop: accordion_items.\r\n\r\n\t\t} // End loop accordion_elements.\r\n\r\n\t} // End function: initialize.\r\n};\r\n\r\n// If script is being required as a node module.\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\t// Export the accordion class.\r\n\tmodule.exports = Accordion;\r\n}\r\n\n\n//# sourceURL=webpack://Accordion/./src/js/accordion.js?");

/***/ })

/******/ });